{"version":3,"file":"static/js/199.84ddb733.chunk.js","mappings":"0KAIA,MAAMA,EAAU,mCACVC,EAAW,+BA+GjB,EA5GgBC,KACd,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,KAChCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,IACxCG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAS,IACtCK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,IAChCO,EAAOC,IAAYR,EAAAA,EAAAA,UAAS,OAyCnCS,EAAAA,EAAAA,YAAU,MAvCWC,iBAAqB,IAAdC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACjCN,GAAW,GACXE,EAAS,MACT,IACE,MAAMO,QAAiBC,EAAAA,EAAMC,IAAI,GAADC,OAAItB,EAAQ,oBAAoB,CAC9DuB,OAAQ,CACNC,QAASzB,EACT0B,SAAU,QACVV,UAIEW,QAA0BC,QAAQC,IACtCT,EAASU,KAAKC,QAAQC,KAAIjB,UACxB,IACE,MAAMkB,QAAuBZ,EAAAA,EAAMC,IAAI,GAADC,OAAItB,EAAQ,WAAAsB,OAAUW,EAAMC,GAAE,YAAY,CAC9EX,OAAQ,CAAEC,QAASzB,EAAS0B,SAAU,WAExC,MAAO,IACFQ,EACH/B,QAAS8B,EAAeH,KAAKC,QAEjC,CAAE,MAAOnB,GAEP,OADAwB,QAAQxB,MAAM,uCAADW,OAAwCW,EAAMC,GAAE,KAAKvB,GAC3D,IAAKsB,EAAO/B,QAAS,GAC9B,MAIJC,EAAWuB,GACXlB,EAAcW,EAASU,KAAKO,YAC9B,CAAE,MAAOzB,GACPwB,QAAQxB,MAAM,mCAAoCA,GAClDC,EAAS,mDACX,CAAC,QACCF,GAAW,EACb,CACF,CAGE2B,CAAahC,EAAY,GACxB,CAACA,IAEJ,MAAMiC,EAAoBC,IACxBjC,EAAeiC,EAAQ,EAGzB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBACHjC,GACCkC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eACD/B,GACFgC,EAAAA,EAAAA,KAAA,KAAAD,SAAI/B,KAEJ6B,EAAAA,EAAAA,MAAAI,EAAAA,SAAA,CAAAF,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAC1BxC,EAAQ6B,KAAKE,IACZO,EAAAA,EAAAA,MAAA,OAAoBC,UAAU,cAAaC,SAAA,EACzCC,EAAAA,EAAAA,KAAA,OACEE,IAAG,GAAAvB,OArEE,mCAqEiBA,OAAGW,EAAMa,aAC/BC,IAAG,GAAAzB,OAAKW,EAAMe,MAAK,WACnBP,UAAU,kBAEZE,EAAAA,EAAAA,KAAA,MAAAD,SAAKT,EAAMe,SACXL,EAAAA,EAAAA,KAAA,KAAGF,UAAU,iBAAgBC,SAAET,EAAMgB,WACpChB,EAAM/B,QAAQe,OAAS,GACtB0B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,SAC5BT,EAAM/B,QAAQgD,MAAM,EAAG,GAAGnB,KAAKoB,IAC9BR,EAAAA,EAAAA,KAAA,OAAqBF,UAAU,SAAQC,UACrCF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAASS,EAAOC,SAAgB,KAAGD,EAAOE,QAAQH,MAAM,EAAG,KAAK,UAD3DC,EAAOjB,SAMrBS,EAAAA,EAAAA,KAAA,KAAAD,SAAG,4BAjBGT,EAAMC,SAsBpBM,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,UACEW,QAASA,IAAMhB,EAAiBjC,EAAc,GAC9CkD,SAA0B,IAAhBlD,EAAkBqC,SAC7B,cAGDF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAM,QAAMrC,EAAY,OAAKE,MAC7BoC,EAAAA,EAAAA,KAAA,UACEW,QAASA,IAAMhB,EAAiBjC,EAAc,GAC9CkD,SAAUlD,IAAgBE,EAAWmC,SACtC,iBAMH,C","sources":["pages/Reviews.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './Reviews.css';\r\n\r\nconst API_KEY = 'f71a63058781b41be67992f9e77f6da4';\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w200'; // Define the base URL for fetching images\r\n\r\nconst Reviews = () => {\r\n  const [reviews, setReviews] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchReviews = async (page = 1) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/movie/top_rated`, {\r\n        params: {\r\n          api_key: API_KEY,\r\n          language: 'en-US',\r\n          page,\r\n        },\r\n      });\r\n\r\n      const moviesWithReviews = await Promise.all(\r\n        response.data.results.map(async (movie) => {\r\n          try {\r\n            const reviewResponse = await axios.get(`${BASE_URL}/movie/${movie.id}/reviews`, {\r\n              params: { api_key: API_KEY, language: 'en-US' },\r\n            });\r\n            return {\r\n              ...movie,\r\n              reviews: reviewResponse.data.results,\r\n            };\r\n          } catch (error) {\r\n            console.error(`Error fetching reviews for movie ID ${movie.id}:`, error);\r\n            return { ...movie, reviews: [] }; // Return movie with empty reviews array on error\r\n          }\r\n        })\r\n      );\r\n\r\n      setReviews(moviesWithReviews);\r\n      setTotalPages(response.data.total_pages);\r\n    } catch (error) {\r\n      console.error('Error fetching top-rated movies:', error);\r\n      setError('Failed to fetch reviews. Please try again later.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchReviews(currentPage);\r\n  }, [currentPage]);\r\n\r\n  const handlePageChange = (newPage) => {\r\n    setCurrentPage(newPage);\r\n  };\r\n\r\n  return (\r\n    <div className=\"reviews-container\">\r\n      <h2>Movie Reviews</h2>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : error ? (\r\n        <p>{error}</p>\r\n      ) : (\r\n        <>\r\n          <div className=\"reviews-grid\">\r\n            {reviews.map((movie) => (\r\n              <div key={movie.id} className=\"review-card\">\r\n                <img \r\n                  src={`${IMAGE_BASE_URL}${movie.poster_path}`} \r\n                  alt={`${movie.title} Poster`} \r\n                  className=\"movie-poster\"\r\n                />\r\n                <h3>{movie.title}</h3>\r\n                <p className=\"movie-overview\">{movie.overview}</p>\r\n                {movie.reviews.length > 0 ? (\r\n                  <div className=\"review-content\">\r\n                    {movie.reviews.slice(0, 2).map((review) => (\r\n                      <div key={review.id} className=\"review\">\r\n                        <p><strong>{review.author}</strong>: {review.content.slice(0, 100)}...</p>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                ) : (\r\n                  <p>No reviews available.</p>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"pagination\">\r\n            <button\r\n              onClick={() => handlePageChange(currentPage - 1)}\r\n              disabled={currentPage === 1}\r\n            >\r\n              Previous\r\n            </button>\r\n            <span>Page {currentPage} of {totalPages}</span>\r\n            <button\r\n              onClick={() => handlePageChange(currentPage + 1)}\r\n              disabled={currentPage === totalPages}\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reviews;\r\n"],"names":["API_KEY","BASE_URL","Reviews","reviews","setReviews","useState","currentPage","setCurrentPage","totalPages","setTotalPages","loading","setLoading","error","setError","useEffect","async","page","arguments","length","undefined","response","axios","get","concat","params","api_key","language","moviesWithReviews","Promise","all","data","results","map","reviewResponse","movie","id","console","total_pages","fetchReviews","handlePageChange","newPage","_jsxs","className","children","_jsx","_Fragment","src","poster_path","alt","title","overview","slice","review","author","content","onClick","disabled"],"sourceRoot":""}